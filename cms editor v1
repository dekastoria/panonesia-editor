
Cetak Biru Pengembangan: CMS Tur Virtual Interaktif (Versi Realistis)
Dokumen ini merinci arsitektur, spesifikasi teknis, dan rencana pengembangan untuk membangun sebuah Visual UI Builder yang berfungsi sebagai CMS untuk overlay tur virtual. Versi ini difokuskan pada kemudahan implementasi dan realisme untuk mencapai produk fungsional (MVP) dengan cepat.

1. Tujuan Proyek (Project Goal)
Tujuan utama proyek ini adalah membangun aplikasi web yang memungkinkan pengguna merancang, mengelola, dan men-generate modul UI interaktif (seperti pop-up, sidebar, dan galeri) secara visual. Output dari aplikasi ini adalah sebuah paket aset (.zip) yang dapat dengan mudah diintegrasikan ke dalam platform tur virtual pihak ketiga hanya dengan modifikasi minimal pada file index.html bawaan.

2. Arsitektur & Rekomendasi Stack
2.1. Filosofi Arsitektur: Hibrida yang Disederhanakan
Kita akan menggunakan pendekatan hibrida yang kuat dengan fokus pada kesederhanaan di sisi frontend untuk mempercepat pengembangan.

Pekerjaan Admin (90%): Semua tugas standar seperti manajemen proyek dan aset akan ditangani oleh Filament. Ini adalah cara tercepat dan paling efisien.

Pekerjaan Inti (10%): Fitur utama, yaitu Live Editor, akan dibangun menggunakan halaman React khusus dengan desain antarmuka yang lebih sederhana dan terfokus.

2.2. Komponen Utama & Teknologi
Backend & Admin

Teknologi: Laravel 12 + Filament 4.

Fungsi: Sebagai inti aplikasi, manajemen data, dan auto-generate halaman admin.

Manajemen Aset

Teknologi: Spatie Media Library (Paket Laravel).

Fungsi: Mengelola unggahan, penyimpanan, dan koleksi file (gambar, PDF, audio).

Editor Live

Teknologi: Halaman khusus React (menggunakan Vite atau Inertia.js).

Fungsi: Membangun antarmuka editor visual dengan layout 2-panel yang sederhana.

State Management

Teknologi: Zustand (Pustaka React).

Fungsi: Mengelola state editor config_json secara efisien dan real-time.

UI Editor

Teknologi: TailwindCSS + shadcn/ui (Komponen React).

Fungsi: Membangun antarmuka panel editor yang modern dan responsif.

Database

Teknologi: PostgreSQL atau MySQL.

Fungsi: Menyimpan semua data konfigurasi proyek, template, dan aset.

Ekspor ZIP

Teknologi: ZipStream (maennche/zipstream-php).

Fungsi: Men-generate file .zip secara on-the-fly tanpa membebani memori server.

Infrastruktur

Teknologi: VPS (Virtual Private Server) + aaPanel.

Fungsi: Hosting dan manajemen server.

3. Desain Database & Skema Data
Struktur data akan disimpan sebagai berikut:

projects: Menyimpan config_json utama untuk setiap proyek.

project_versions: Digunakan untuk mencatat histori dan memungkinkan rollback.

templates: Untuk skalabilitas di masa depan, jika ingin menambah template baru.

media: Tabel ini akan dikelola secara otomatis oleh Spatie Media Library.

Berikut adalah contoh struktur data config_json:

{
  "project": { "title": "Tur Virtual Kantor Pusat" },
  "background360": { "src": "/media/panos/lobby.jpg" },
  "elements": [
    { "id": "uuid-1", "type": "popup-image", "label": "Poster Acara", "src": "/media/images/poster.jpg" },
    { "id": "uuid-2", "type": "sidebar", "label": "Menu Utama", "items": [
      { "id": "uuid-3", "type": "link-to-popup", "label": "Lihat Poster", "targetId": "uuid-1" }
    ]}
  ],
  "customCode": { "html": "", "css": "", "js": "" }
}

4. Alur Kerja Inti & Desain Editor
Fokus utama editor adalah pada alur kerja pilih → isi → lihat.

Langkah 1: Panel Kiri (Kontrol & Editor)

Pengguna memilih kategori modul yang ingin diedit (misalnya, Pop-up).

Area editor kemudian menampilkan daftar pop-up yang ada dan sebuah formulir untuk mengedit atau menambah yang baru.

Langkah 2: Panel Kanan (Preview)

Panel ini akan berisi sebuah <iframe> yang menampilkan hasil render dari konfigurasi Anda secara real-time.

Terdapat toolbar sederhana untuk beralih antara tampilan Mobile dan Desktop.

Langkah 3: Alur Data Real-time

Setiap perubahan di form pada Panel Kiri akan memperbarui state config_json.

Objek config_json yang baru akan dikirim ke <iframe> menggunakan window.postMessage.

Script di dalam <iframe> akan me-render ulang UI berdasarkan data baru tersebut.

5. Rencana Pengembangan MVP (Realistis)
Proyek akan dibangun dalam beberapa fase:

Fase 1: Fondasi Backend

Setup Laravel + Filament.

Buat CRUD untuk Projects dan Assets.

Fase 2: Inti Editor

Buat halaman editor React dengan layout 2-panel.

Implementasikan komunikasi postMessage ke <iframe>.

Tambahkan viewer 360 sebagai background di <iframe>.

Fase 3: Fitur Pertama & Ekspor

Bangun modul Image Popup secara lengkap.

Implementasikan fitur Auto-save.

Buat logika Ekspor ke ZIP.

Fase 4: Pengembangan Lanjutan

Tambahkan modul-modul UI lainnya secara bertahap.

Implementasikan sistem template sederhana.

Tambahkan fitur Versioning.

6. Integrasi & Metode Trigger
Langkah 1: Siapkan Struktur Folder Output

Proyek-Tur-Virtual/
├── index.html
└── aset-custom/
    ├── css/
    │   └── style.css
    ├── js/
    │   ├── data.js
    │   └── script.js
    ├── gambar/
    │   └── (file gambar)
    └── dokumen/
        └── (file pdf)

Langkah 2: Lakukan Injeksi Kode Manual

Tambahkan di dalam <head>:

<link rel="stylesheet" href="./aset-custom/css/style.css">

Tambahkan sebelum </body>:

<script src="./aset-custom/js/data.js" defer></script>
<script src="./aset-custom/js/script.js" defer></script>

Langkah 3: Atur Mekanisme Trigger

Fungsi di script.js akan dipanggil melalui fitur "Execute JavaScript" pada hotspot di dalam editor tur virtual bawaan. Contoh:

showPopup('uuid-1');
