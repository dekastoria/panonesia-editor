Cetak Biru Pengembangan: CMS Tur Virtual Interaktif (Versi Final & Realistis)
Dokumen ini adalah panduan arsitektur dan teknis lengkap untuk membangun Visual UI Builder bagi tur virtual. Dokumen ini telah diperkaya berdasarkan analisis mendalam untuk memastikan produk akhir yang kuat, aman, dan mudah dikembangkan.

1. Tujuan Proyek (Project Goal)
Membangun aplikasi web (CMS) yang memungkinkan pengguna merancang, mengelola, dan men-generate modul UI interaktif secara visual. Output dari aplikasi ini adalah sebuah paket aset (.zip) yang dapat dengan mudah diintegrasikan ke dalam platform tur virtual pihak ketiga hanya dengan modifikasi minimal pada file index.html bawaan.

2. Arsitektur & Rekomendasi Stack
2.1. Filosofi Arsitektur: Hibrida yang Disederhanakan
Kita menggunakan pendekatan hibrida yang kuat, dengan fokus pada kecepatan dan kemudahan pengembangan.

90% Pekerjaan Admin (CRUD Standar): Ditangani oleh Filament. Ini adalah cara tercepat untuk membangun manajemen proyek dan aset.

10% Pekerjaan Inti (Live Editor): Ditangani oleh halaman React khusus dengan desain antarmuka yang terfokus dan sederhana.

2.2. Komponen Utama & Teknologi
Komponen

Teknologi yang Direkomendasikan

Fungsi Utama

Backend & Admin

Laravel 12 + Filament 4

Inti aplikasi, manajemen data, dan auto-generate halaman admin.

Manajemen Aset

Spatie Media Library (Paket Laravel)

Mengelola unggahan, penyimpanan, dan koleksi file (gambar, PDF, audio).

Editor Live

Halaman khusus React (Vite atau Inertia.js)

Membangun antarmuka editor visual dengan layout 2-panel yang sederhana.

State Management

Zustand (Pustaka React)

Mengelola state editor config_json secara efisien dan real-time.

UI Editor

TailwindCSS + shadcn/ui (Komponen React)

Membangun antarmuka panel editor yang modern dan responsif.

Database

PostgreSQL atau MySQL

Menyimpan semua data konfigurasi proyek, template, dan aset.

Ekspor ZIP

ZipStream (maennche/zipstream-php)

Men-generate file .zip secara on-the-fly.

Infrastruktur

VPS (Virtual Private Server) + aaPanel

Hosting dan manajemen server.

3. Desain Database & Skema Data
projects: Menyimpan config_json utama dan template_id.

project_versions: Menyimpan histori config_json untuk rollback.

templates: Menyimpan name, key unik, dan schema_json.

media: Dikelola secara otomatis oleh Spatie Media Library.

config_json (Contoh)
{
  "schemaVersion": "1.0",
  "project": { "title": "Tur Virtual Kantor Pusat" },
  "background360": { "type": "equirect", "src": "/media/panos/lobby.jpg", "yaw": 120, "fov": 75 },
  "elements": [
    { "id": "uuid-1", "type": "popup-image", "label": "Poster Acara", "src": "/media/images/poster.jpg" },
    { "id": "uuid-2", "type": "sidebar", "label": "Menu Utama", "items": [
      { "id": "uuid-3", "type": "link-to-popup", "label": "Lihat Poster", "targetId": "uuid-1" }
    ]}
  ],
  "customCode": { "html": "", "css": "", "js": "" }
}

4. Alur Kerja Inti & Desain Editor
4.1. Arsitektur Editor Live Preview (Disederhanakan)
Fokus utama adalah pada alur kerja pilih → isi → lihat.

Panel Kiri (Kontrol & Editor): Sidebar untuk memilih modul (Pop-up, Sidebar, dll.) dan area utama untuk menampilkan form isian yang relevan.

Panel Kanan (Preview): Sebuah <iframe> yang di-sandbox (sandbox="allow-scripts allow-modals") dengan toolbar untuk switch device.

Protokol Komunikasi (postMessage):

Editor → Preview: Mengirim pesan { type: "UPDATE", payload: { newConfig: {...} } } setiap kali ada perubahan (dengan debounce 300ms).

Preview → Editor: Mengirim pesan { type: "SELECT", payload: { elementId: "..." } } saat elemen di preview diklik.

4.2. Sistem Template Berbasis Skema
Setiap template UI akan memiliki schema.json yang mendefinisikan form-nya. Editor React akan membaca skema ini untuk membangun form secara dinamis. Ini adalah kunci untuk skalabilitas.

5. Rencana Pengembangan MVP (Dengan Kriteria Jelas)
Fase 1: Fondasi Backend
Tujuan: Menyiapkan struktur dasar aplikasi.

Kriteria Selesai:

Proyek Laravel dan Filament berhasil diinstal.

CRUD untuk Projects (dengan kolom config_json) berfungsi.

Spatie Media Library terintegrasi dan bisa meng-upload file.

Fase 2: Inti Editor & Live Preview
Tujuan: Membangun jantung aplikasi, yaitu editor visual.

Kriteria Selesai:

Halaman editor React dapat memuat config_json dari backend.

Panel Kiri (Editor) dan Panel Kanan (<iframe> Preview) berhasil ditampilkan.

Komunikasi postMessage (Editor → Preview) berjalan dengan debounce.

Viewer 360 (Pannellum) berhasil tampil sebagai background di <iframe>.

Fitur Auto-save config_json berfungsi.

Fase 3: Fitur Lengkap Pertama & Ekspor
Tujuan: Mengimplementasikan satu alur penuh dari pembuatan hingga ekspor.

Kriteria Selesai:

Modul Image Popup berfungsi penuh (tambah, edit, hapus).

Two-way selection (Preview → Editor) untuk Image Popup berjalan.

Fungsi Ekspor ke ZIP menghasilkan folder aset-custom yang fungsional.

Terdapat tombol "Export Preview" untuk verifikasi sebelum download.

Fase 4: Pengembangan Lanjutan
Tujuan: Memperkaya aplikasi dengan lebih banyak fitur.

Kriteria Selesai:

Minimal 3 modul UI baru ditambahkan (misal: Sidebar, PDF Viewer).

Sistem Template berbasis schema.json diimplementasikan.

Fitur Versioning (project_versions) dapat menyimpan dan me-restore konfigurasi.

6. Integrasi & Metode Trigger
6.1. Struktur Folder Output
Proyek-Tur-Virtual/
├── index.html
└── aset-custom/
    ├── css/
    │   └── style.css
    ├── js/
    │   ├── data.js
    │   └── script.js
    ├── gambar/
    │   └── (file gambar)
    └── dokumen/
        └── (file pdf)

6.2. Kode Injeksi Manual
Pengguna akan menambahkan kode berikut ke index.html bawaan mereka.

Di dalam <head>:

<link rel="stylesheet" href="./aset-custom/css/style.css">

Tepat sebelum </body>:

<script src="./aset-custom/js/data.js" defer></script>
<script src="./aset-custom/js/script.js" defer></script>

6.3. Mekanisme Trigger
Fungsi di script.js akan dipanggil melalui fitur "Execute JavaScript" pada hotspot di dalam editor tur virtual bawaan. Contoh:

showPopup('uuid-1');

7. Keamanan (Wajib)
Sanitasi Input: Gunakan DOMPurify pada semua input HTML dari pengguna sebelum disimpan ke database.

Content Security Policy (CSP): Hasil ekspor index.html harus menyertakan meta tag CSP untuk membatasi eksekusi script dan pemuatan sumber daya eksternal.
